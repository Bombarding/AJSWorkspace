import java.awt.*;
import java.awt.event.*;
import java.awt.geom.AffineTransform;
import java.awt.geom.Path2D;
import java.awt.geom.PathIterator;

public class Robot extends Frame {

    public static void main(String[] args){
        new Robot();
    }

    Robot() {
        super("Robot Animation");
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e){System.exit(0);
            }});

        setSize(800, 600);
        add("Center", new CvRobotAnim());
        show();
    }
}

class CvRobotAnim extends Canvas {


    public void paint(Graphics g) {
        Graphics2D g2d = (Graphics2D)g;

        int [] basex = {0, 0, 150, 150};
        int [] basey = {0, 200, 200, 0};
        Polygon base = new Polygon(basex, basey, 4);
        Path2D basep2d = new Path2D.Double(base);

        int [] armx = {0, 0, 50, 50};
        int [] army = {0, 250, 250, 0};
        Polygon arm = new Polygon(armx, army, 4);
        Path2D armp2d = new Path2D.Double(arm);

        int [] handx = {0, 0, 50, 50};
        int [] handy = {0, 200, 200, 0};
        Polygon hand = new Polygon(handx, handy, 4);
        Path2D handp2d = new Path2D.Double(hand);

        int [] fingx = {25, 0, 0, 15, 15, 25};
        int [] fingy = {0, 0, 50, 50, 15, 15};
        Polygon fing= new Polygon(fingx, fingy, 6);
        Path2D fingp2d = new Path2D.Double(fing);

        AffineTransform tx1 = new AffineTransform();
        tx1.translate(300d, 200d);
        basep2d.transform(tx1);
        handp2d.transform(tx1);
        fingp2d.transform(tx1);

        tx1.rotate(10d);
        tx1.translate(10d, 10d);
        armp2d.transform(tx1);

        // Get Base 2 coords
        // Get Arm 3 coords
        // Get x, y distance from Arm 3 to Base 2
        // Translate base by Arm3x-Base2x, Arm3y-Base2y
        // Rotate about Arm3

        // The index of the point where one component connects to another
        final int baseAnchorInd = 3;
        final int armAnchorInd = 0;

        // The coordinates where one component connects to another
        double [] baseAnchorCoord = new double[2];
        double [] armAnchorCoord = new double[2];


        double [] working = new double[2];
        int i = 0;

        // Step through all the points in the base. Find our anchor point.
        PathIterator pi = basep2d.getPathIterator(null);
        while (!pi.isDone()) {
            pi.currentSegment(working);
            if (i == baseAnchorInd) {
                baseAnchorCoord[0] = working[0];
                baseAnchorCoord[1] = working[1];
            }
            i++;
            pi.next();
        }

        i = 0;
        pi = armp2d.getPathIterator(null);
        // Do the same thing for arm.
        while (!pi.isDone()) {
            pi.currentSegment(working);
            if (i == armAnchorInd) {
                armAnchorCoord[0] = working[0];
                armAnchorCoord[1] = working[1];
            }
            i++;
            pi.next();
        }

        // Move the arm by the difference in its anchor point minus the base anchor point (attach the corners)
        AffineTransform tx2 = new AffineTransform();
        double deltaX = baseAnchorCoord[0] - armAnchorCoord[0];
        double deltaY = baseAnchorCoord[1] - armAnchorCoord[1];

        tx2.translate(deltaX, deltaY);
        // tx2.rotate(30d, baseAnchorCoord[0], baseAnchorCoord[1]);

        // Apply the actual transform
        armp2d.transform(tx2);

        // Draw it all.
        g2d.draw(basep2d);
        g2d.draw(handp2d);
        g2d.draw(fingp2d);
        g2d.draw(armp2d);

    }
}